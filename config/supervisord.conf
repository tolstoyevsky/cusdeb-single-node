[unix_http_server]
file=/var/run/cusdeb-supervisor.sock  ; (the path to the socket file)

[supervisord]
logfile=/var/log/supervisor/cusdeb-supervisord.log  ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB                               ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10                                  ; (num of main logfile rotation backups;default 10)
loglevel=info                                       ; (log level;default info; others: debug,warn,trace)
pidfile=/var/run/cusdeb-supervisord.pid             ; (supervisord pidfile;default supervisord.pid)
nodaemon=true                                       ; (start in foreground if true;default false)
minfds=1024                                         ; (min. avail startup file descriptors;default 1024)
minprocs=200                                        ; (min. avail process descriptors;default 200)
;umask=022                                          ; (process file creation umask;default 022)
;user=chrism                                        ; (default is current user, required if root)
;identifier=supervisor                              ; (supervisord identifier, default is 'supervisor')
;directory=/tmp                                     ; (default is not to cd during start)
;nocleanup=true                                     ; (don't clean up tempfiles at start;default false)
;childlogdir=/tmp                                   ; ('AUTO' child log dir, default $TEMP)
;environment=KEY=value                              ; (key value pairs to add to environment)
;strip_ansi=false                                   ; (strip ansi escape codes in logs; def. false)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/cusdeb-supervisor.sock    ; use a unix:// URL  for a unix socket
;username=chris                                     ; should be same as http_username if set
;password=123                                       ; should be same as http_password if set
;prompt=mysupervisor                                ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history                         ; use readline history if available

[program:bm]
autorestart=false
command=run_bm.sh
stopsignal=KILL
stopasgroup=true

[program:dashboard_client]
autorestart=false
command=run_dashboard_client.sh
stopsignal=KILL
stopasgroup=true

[program:dashboard_server]
autorestart=false
command=run_dashboard_server.sh
stopsignal=KILL
stopasgroup=true

[program:dominion]
autorestart=false
command=run_dominion.sh
stopsignal=KILL
stopasgroup=true

[program:worker]
command=run_worker.sh
process_name=%(program_name)s_%(process_num)02d
autostart=true
autorestart=false
numprocs=1
stdout_logfile=/var/log/dominion_worker.log
stderr_logfile=/var/log/dominion_worker.log
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true

; Set Celery priority higher than default (999)
; so, if rabbitmq is supervised, it will start first.
priority=1000
